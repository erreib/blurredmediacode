// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uQDE5j5DBuARRDaqpw17y1
// Component: uAYN8M7WCl

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import {
  LightModeValue,
  useLightMode
} from "./PlasmicGlobalVariant__LightMode"; // plasmic-import: sdvEOyJTEv/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blurred_media_components.module.css"; // plasmic-import: uQDE5j5DBuARRDaqpw17y1/projectcss
import sty from "./PlasmicSubscriptionSelectBox.module.css"; // plasmic-import: uAYN8M7WCl/css

import Icon11Icon from "./icons/PlasmicIcon__Icon11"; // plasmic-import: dN3J5HEBxZ/icon

export type PlasmicSubscriptionSelectBox__VariantMembers = {
  selected: "selected";
};
export type PlasmicSubscriptionSelectBox__VariantsArgs = {
  selected?: SingleBooleanChoiceArg<"selected">;
};
type VariantPropType = keyof PlasmicSubscriptionSelectBox__VariantsArgs;
export const PlasmicSubscriptionSelectBox__VariantProps =
  new Array<VariantPropType>("selected");

export type PlasmicSubscriptionSelectBox__ArgsType = {
  children?: React.ReactNode;
  slot?: React.ReactNode;
};
type ArgPropType = keyof PlasmicSubscriptionSelectBox__ArgsType;
export const PlasmicSubscriptionSelectBox__ArgProps = new Array<ArgPropType>(
  "children",
  "slot"
);

export type PlasmicSubscriptionSelectBox__OverridesType = {
  root?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultSubscriptionSelectBoxProps {
  children?: React.ReactNode;
  slot?: React.ReactNode;
  selected?: SingleBooleanChoiceArg<"selected">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSubscriptionSelectBox__RenderFunc(props: {
  variants: PlasmicSubscriptionSelectBox__VariantsArgs;
  args: PlasmicSubscriptionSelectBox__ArgsType;
  overrides: PlasmicSubscriptionSelectBox__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "selected",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.selected
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    lightMode: useLightMode()
  });

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root,
          {
            [projectcss.global_lightMode_lightModeColors]: hasVariant(
              globalVariants,
              "lightMode",
              "lightModeColors"
            )
          }
        )}
      >
        {true ? (
          <div
            className={classNames(projectcss.all, sty.freeBox__ryPd, {
              [sty.freeBoxselected_selected__ryPDrHncw]: hasVariant(
                $state,
                "selected",
                "selected"
              )
            })}
          >
            <div className={classNames(projectcss.all, sty.freeBox__rx5Mj)}>
              <div className={classNames(projectcss.all, sty.freeBox__hvn0N)}>
                {p.renderPlasmicSlot({
                  defaultContents: "$29.99 | Monthly",
                  value: args.children,
                  className: classNames(sty.slotTargetChildren)
                })}
              </div>
              <div className={classNames(projectcss.all, sty.freeBox__sm0Z3)}>
                {p.renderPlasmicSlot({
                  defaultContents: "Access the entire site",
                  value: args.slot,
                  className: classNames(sty.slotTargetSlot)
                })}
              </div>
            </div>
            <div
              className={classNames(projectcss.all, sty.freeBox__jg0So, {
                [sty.freeBoxselected_selected__jg0SorHncw]: hasVariant(
                  $state,
                  "selected",
                  "selected"
                )
              })}
            >
              {(hasVariant($state, "selected", "selected") ? true : true) ? (
                <Icon11Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg, {
                    [sty.svgselected_selected]: hasVariant(
                      $state,
                      "selected",
                      "selected"
                    )
                  })}
                  role={"img"}
                />
              ) : null}
            </div>
          </div>
        ) : null}
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "svg"],
  svg: ["svg"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSubscriptionSelectBox__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSubscriptionSelectBox__VariantsArgs;
    args?: PlasmicSubscriptionSelectBox__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSubscriptionSelectBox__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicSubscriptionSelectBox__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicSubscriptionSelectBox__ArgProps,
          internalVariantPropNames: PlasmicSubscriptionSelectBox__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSubscriptionSelectBox__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSubscriptionSelectBox";
  } else {
    func.displayName = `PlasmicSubscriptionSelectBox.${nodeName}`;
  }
  return func;
}

export const PlasmicSubscriptionSelectBox = Object.assign(
  // Top-level PlasmicSubscriptionSelectBox renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicSubscriptionSelectBox
    internalVariantProps: PlasmicSubscriptionSelectBox__VariantProps,
    internalArgProps: PlasmicSubscriptionSelectBox__ArgProps
  }
);

export default PlasmicSubscriptionSelectBox;
/* prettier-ignore-end */
