// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uQDE5j5DBuARRDaqpw17y1
// Component: wYwyMJ4sax

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import RegistrationAndPaymentForm from "../../RegistrationAndPaymentForm"; // plasmic-import: Ku2Np8dqUu/component

import {
  LightModeValue,
  useLightMode
} from "./PlasmicGlobalVariant__LightMode"; // plasmic-import: sdvEOyJTEv/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blurred_media_components.module.css"; // plasmic-import: uQDE5j5DBuARRDaqpw17y1/projectcss
import sty from "./PlasmicPaymentManagement.module.css"; // plasmic-import: wYwyMJ4sax/css

export type PlasmicPaymentManagement__VariantMembers = {};
export type PlasmicPaymentManagement__VariantsArgs = {};
type VariantPropType = keyof PlasmicPaymentManagement__VariantsArgs;
export const PlasmicPaymentManagement__VariantProps =
  new Array<VariantPropType>();

export type PlasmicPaymentManagement__ArgsType = {};
type ArgPropType = keyof PlasmicPaymentManagement__ArgsType;
export const PlasmicPaymentManagement__ArgProps = new Array<ArgPropType>();

export type PlasmicPaymentManagement__OverridesType = {
  root?: p.Flex<"div">;
  text?: p.Flex<"div">;
  registrationAndPaymentForm?: p.Flex<typeof RegistrationAndPaymentForm>;
};

export interface DefaultPaymentManagementProps {}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicPaymentManagement__RenderFunc(props: {
  variants: PlasmicPaymentManagement__VariantsArgs;
  args: PlasmicPaymentManagement__ArgsType;
  overrides: PlasmicPaymentManagement__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});

  const globalVariants = ensureGlobalVariants({
    lightMode: useLightMode()
  });

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [projectcss.global_lightMode_lightModeColors]: hasVariant(
                globalVariants,
                "lightMode",
                "lightModeColors"
              ),
              [sty.rootglobal_lightMode_lightModeColors]: hasVariant(
                globalVariants,
                "lightMode",
                "lightModeColors"
              )
            }
          )}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Manage Payment"}
          </div>
          <RegistrationAndPaymentForm
            data-plasmic-name={"registrationAndPaymentForm"}
            data-plasmic-override={overrides.registrationAndPaymentForm}
            className={classNames(
              "__wab_instance",
              sty.registrationAndPaymentForm
            )}
            paymentManagement={"paymentmanagePaymententeredNosub" as const}
          />
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "text", "registrationAndPaymentForm"],
  text: ["text"],
  registrationAndPaymentForm: ["registrationAndPaymentForm"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  text: "div";
  registrationAndPaymentForm: typeof RegistrationAndPaymentForm;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicPaymentManagement__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicPaymentManagement__VariantsArgs;
    args?: PlasmicPaymentManagement__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicPaymentManagement__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicPaymentManagement__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicPaymentManagement__ArgProps,
          internalVariantPropNames: PlasmicPaymentManagement__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicPaymentManagement__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicPaymentManagement";
  } else {
    func.displayName = `PlasmicPaymentManagement.${nodeName}`;
  }
  return func;
}

export const PlasmicPaymentManagement = Object.assign(
  // Top-level PlasmicPaymentManagement renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    text: makeNodeComponent("text"),
    registrationAndPaymentForm: makeNodeComponent("registrationAndPaymentForm"),

    // Metadata about props expected for PlasmicPaymentManagement
    internalVariantProps: PlasmicPaymentManagement__VariantProps,
    internalArgProps: PlasmicPaymentManagement__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicPaymentManagement;
/* prettier-ignore-end */
