// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: uQDE5j5DBuARRDaqpw17y1
// Component: Ku2Np8dqUu

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Divider from "../../Divider"; // plasmic-import: UozlDIB79V/component
import NormalDataField from "../../NormalDataField"; // plasmic-import: RPypyu0aOYg/component
import SubscriptionSelectBox from "../../SubscriptionSelectBox"; // plasmic-import: uAYN8M7WCl/component
import { TabsContainer } from "@plasmicpkgs/plasmic-tabs"; // plasmic-import: qT-BBamUwNg/codeComponent
import { TabButton } from "@plasmicpkgs/plasmic-tabs"; // plasmic-import: 5jaBI7A4_ak/codeComponent
import Button from "../../Button"; // plasmic-import: lBHNzts6tFyj/component
import { TabUnderline } from "@plasmicpkgs/plasmic-tabs"; // plasmic-import: 7uvxnLIBlo3/codeComponent
import { TabContent } from "@plasmicpkgs/plasmic-tabs"; // plasmic-import: KyRr6GQ_tPI/codeComponent
import NormalButton from "../../NormalButton"; // plasmic-import: p0J7lT78rku/component

import {
  LightModeValue,
  useLightMode
} from "./PlasmicGlobalVariant__LightMode"; // plasmic-import: sdvEOyJTEv/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blurred_media_components.module.css"; // plasmic-import: uQDE5j5DBuARRDaqpw17y1/projectcss
import sty from "./PlasmicRegistrationAndPaymentForm.module.css"; // plasmic-import: Ku2Np8dqUu/css

import Icon2Icon from "./icons/PlasmicIcon__Icon2"; // plasmic-import: mvGkaEaAUg/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: 0y54odHLq4u/icon
import Icon4Icon from "./icons/PlasmicIcon__Icon4"; // plasmic-import: N8BUg8Gn-O/icon
import Icon9Icon from "./icons/PlasmicIcon__Icon9"; // plasmic-import: hH2TRVH_sH/icon
import IconIcon from "../plasmic_tabs/icons/PlasmicIcon__Icon"; // plasmic-import: 8K40faRNhuCj/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: KUxy9ppNeX/icon
import Icon7Icon from "./icons/PlasmicIcon__Icon7"; // plasmic-import: v5jYZWt2im/icon
import Icon8Icon from "./icons/PlasmicIcon__Icon8"; // plasmic-import: HaySzmF32Z/icon
import Icon10Icon from "./icons/PlasmicIcon__Icon10"; // plasmic-import: sI0Q-OYNQZ/icon
import Icon3Icon from "./icons/PlasmicIcon__Icon3"; // plasmic-import: Pf_YsiPu1WX/icon

export type PlasmicRegistrationAndPaymentForm__VariantMembers = {
  signupNewUser:
    | "newuserEmailentered"
    | "newuserPwentered"
    | "newuserSubselected"
    | "newuserPaymententered";
  signupReturningUser:
    | "returninguserEmailentered"
    | "returninguserPwenteredWrongpw"
    | "returninguserPwenteredSubalreadyselected"
    | "returninguserNopaymentinfo";
  paymentManagement: "paymentmanagePaymententeredNosub";
};
export type PlasmicRegistrationAndPaymentForm__VariantsArgs = {
  signupNewUser?: SingleChoiceArg<
    | "newuserEmailentered"
    | "newuserPwentered"
    | "newuserSubselected"
    | "newuserPaymententered"
  >;
  signupReturningUser?: SingleChoiceArg<
    | "returninguserEmailentered"
    | "returninguserPwenteredWrongpw"
    | "returninguserPwenteredSubalreadyselected"
    | "returninguserNopaymentinfo"
  >;
  paymentManagement?: SingleChoiceArg<"paymentmanagePaymententeredNosub">;
};
type VariantPropType = keyof PlasmicRegistrationAndPaymentForm__VariantsArgs;
export const PlasmicRegistrationAndPaymentForm__VariantProps =
  new Array<VariantPropType>(
    "signupNewUser",
    "signupReturningUser",
    "paymentManagement"
  );

export type PlasmicRegistrationAndPaymentForm__ArgsType = {};
type ArgPropType = keyof PlasmicRegistrationAndPaymentForm__ArgsType;
export const PlasmicRegistrationAndPaymentForm__ArgProps =
  new Array<ArgPropType>();

export type PlasmicRegistrationAndPaymentForm__OverridesType = {
  root?: p.Flex<"div">;
  loginModalBannercontainer?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  divider?: p.Flex<typeof Divider>;
  registerEmailInput?: p.Flex<typeof NormalDataField>;
  registerPwInput?: p.Flex<typeof NormalDataField>;
  registerPwInputUserRecognized?: p.Flex<typeof NormalDataField>;
  link?: p.Flex<"a"> & Partial<LinkProps>;
  tabsContainer?: p.Flex<typeof TabsContainer>;
  tabUnderline?: p.Flex<typeof TabUnderline>;
  paymentCcEntry?: p.Flex<typeof NormalDataField>;
  paymentCcDate?: p.Flex<typeof NormalDataField>;
  paymentCcCvc?: p.Flex<typeof NormalDataField>;
  normalButton?: p.Flex<typeof NormalButton>;
};

export interface DefaultRegistrationAndPaymentFormProps {
  signupNewUser?: SingleChoiceArg<
    | "newuserEmailentered"
    | "newuserPwentered"
    | "newuserSubselected"
    | "newuserPaymententered"
  >;
  signupReturningUser?: SingleChoiceArg<
    | "returninguserEmailentered"
    | "returninguserPwenteredWrongpw"
    | "returninguserPwenteredSubalreadyselected"
    | "returninguserNopaymentinfo"
  >;
  paymentManagement?: SingleChoiceArg<"paymentmanagePaymententeredNosub">;
  className?: string;
}

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());
const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicRegistrationAndPaymentForm__RenderFunc(props: {
  variants: PlasmicRegistrationAndPaymentForm__VariantsArgs;
  args: PlasmicRegistrationAndPaymentForm__ArgsType;
  overrides: PlasmicRegistrationAndPaymentForm__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const __nextRouter = useNextRouter();

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "paymentCcEntry.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "paymentCcDate.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "paymentCcCvc.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "signupNewUser",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.signupNewUser
      },
      {
        path: "registerEmailInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "registerPwInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "signupReturningUser",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.signupReturningUser
      },
      {
        path: "registerPwInputUserRecognized.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "" as const
      },
      {
        path: "paymentManagement",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.paymentManagement
      }
    ],
    [$props, $ctx]
  );
  const $state = p.useDollarState(stateSpecs, { $props, $ctx, $queries });

  const globalVariants = ensureGlobalVariants({
    lightMode: useLightMode()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root,
        {
          [projectcss.global_lightMode_lightModeColors]: hasVariant(
            globalVariants,
            "lightMode",
            "lightModeColors"
          ),
          [sty.rootglobal_lightMode_lightModeColors]: hasVariant(
            globalVariants,
            "lightMode",
            "lightModeColors"
          ),
          [sty.rootpaymentManagement_paymentmanagePaymententeredNosub]:
            hasVariant(
              $state,
              "paymentManagement",
              "paymentmanagePaymententeredNosub"
            ),
          [sty.rootsignupNewUser_newuserPaymententered]: hasVariant(
            $state,
            "signupNewUser",
            "newuserPaymententered"
          ),
          [sty.rootsignupNewUser_newuserPwentered]: hasVariant(
            $state,
            "signupNewUser",
            "newuserPwentered"
          ),
          [sty.rootsignupNewUser_newuserSubselected]: hasVariant(
            $state,
            "signupNewUser",
            "newuserSubselected"
          ),
          [sty.rootsignupReturningUser_returninguserEmailentered]: hasVariant(
            $state,
            "signupReturningUser",
            "returninguserEmailentered"
          ),
          [sty.rootsignupReturningUser_returninguserNopaymentinfo]: hasVariant(
            $state,
            "signupReturningUser",
            "returninguserNopaymentinfo"
          ),
          [sty.rootsignupReturningUser_returninguserPwenteredSubalreadyselected]:
            hasVariant(
              $state,
              "signupReturningUser",
              "returninguserPwenteredSubalreadyselected"
            ),
          [sty.rootsignupReturningUser_returninguserPwenteredWrongpw]:
            hasVariant(
              $state,
              "signupReturningUser",
              "returninguserPwenteredWrongpw"
            )
        }
      )}
    >
      {(
        hasVariant(
          $state,
          "paymentManagement",
          "paymentmanagePaymententeredNosub"
        )
          ? true
          : hasVariant(
              $state,
              "signupReturningUser",
              "returninguserNopaymentinfo"
            )
          ? true
          : hasVariant($state, "signupNewUser", "newuserPaymententered")
          ? true
          : hasVariant($state, "signupNewUser", "newuserSubselected")
          ? true
          : hasVariant($state, "signupNewUser", "newuserPwentered")
          ? true
          : true
      ) ? (
        <p.Stack
          as={"div"}
          data-plasmic-name={"loginModalBannercontainer"}
          data-plasmic-override={overrides.loginModalBannercontainer}
          hasGap={true}
          className={classNames(projectcss.all, sty.loginModalBannercontainer, {
            [sty.loginModalBannercontainerglobal_lightMode_lightModeColors]:
              hasVariant(globalVariants, "lightMode", "lightModeColors"),
            [sty.loginModalBannercontainerpaymentManagement_paymentmanagePaymententeredNosub]:
              hasVariant(
                $state,
                "paymentManagement",
                "paymentmanagePaymententeredNosub"
              ),
            [sty.loginModalBannercontainersignupNewUser_newuserPaymententered]:
              hasVariant($state, "signupNewUser", "newuserPaymententered"),
            [sty.loginModalBannercontainersignupNewUser_newuserPwentered]:
              hasVariant($state, "signupNewUser", "newuserPwentered"),
            [sty.loginModalBannercontainersignupNewUser_newuserSubselected]:
              hasVariant($state, "signupNewUser", "newuserSubselected"),
            [sty.loginModalBannercontainersignupReturningUser_returninguserNopaymentinfo]:
              hasVariant(
                $state,
                "signupReturningUser",
                "returninguserNopaymentinfo"
              )
          })}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zWjue
            )}
          >
            {"Join"}
          </div>
          <p.PlasmicImg
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"49px" as const}
            displayMaxHeight={"none" as const}
            displayMaxWidth={"100%" as const}
            displayMinHeight={"0" as const}
            displayMinWidth={"0" as const}
            displayWidth={"auto" as const}
            loading={"lazy" as const}
            src={{
              src: "/plasmic/blurred_media_components/images/image.png",
              fullWidth: 2938,
              fullHeight: 1333,
              aspectRatio: undefined
            }}
          />
        </p.Stack>
      ) : null}
      <Divider
        data-plasmic-name={"divider"}
        data-plasmic-override={overrides.divider}
        className={classNames("__wab_instance", sty.divider, {
          [sty.dividerglobal_lightMode_lightModeColors]: hasVariant(
            globalVariants,
            "lightMode",
            "lightModeColors"
          )
        })}
        showHeaderText={true}
      >
        {"Sign Up"}
      </Divider>
      {(
        hasVariant(
          $state,
          "signupReturningUser",
          "returninguserPwenteredSubalreadyselected"
        )
          ? true
          : hasVariant(
              $state,
              "signupReturningUser",
              "returninguserPwenteredWrongpw"
            )
          ? true
          : true
      ) ? (
        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__cStL,
            {
              [sty.textsignupReturningUser_returninguserPwenteredSubalreadyselected__cStLdMuc1]:
                hasVariant(
                  $state,
                  "signupReturningUser",
                  "returninguserPwenteredSubalreadyselected"
                ),
              [sty.textsignupReturningUser_returninguserPwenteredWrongpw__cStL1Yvji]:
                hasVariant(
                  $state,
                  "signupReturningUser",
                  "returninguserPwenteredWrongpw"
                )
            }
          )}
        >
          {hasVariant(
            $state,
            "signupReturningUser",
            "returninguserPwenteredWrongpw"
          ) ? (
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"Incorrect password!"}
              </span>
              <React.Fragment>
                {
                  "\nThere is already an account using your email, however you are entering the wrong password."
                }
              </React.Fragment>
            </React.Fragment>
          ) : (
            <React.Fragment>
              <span
                className={"plasmic_default__all plasmic_default__span"}
                style={{ fontWeight: 700 }}
              >
                {"You are already subscribed! "}
              </span>
              <React.Fragment>
                {"\nRedirecting to your main feed"}
              </React.Fragment>
            </React.Fragment>
          )}
        </div>
      ) : null}
      {true ? (
        <div
          className={classNames(projectcss.all, sty.freeBox__iZ1BI, {
            [sty.freeBoxsignupNewUser_newuserEmailentered__iZ1BISt0Jw]:
              hasVariant($state, "signupNewUser", "newuserEmailentered"),
            [sty.freeBoxsignupNewUser_newuserPaymententered__iZ1BIMrtW]:
              hasVariant($state, "signupNewUser", "newuserPaymententered"),
            [sty.freeBoxsignupNewUser_newuserPwentered__iZ1BIhl0Yh]: hasVariant(
              $state,
              "signupNewUser",
              "newuserPwentered"
            ),
            [sty.freeBoxsignupNewUser_newuserSubselected__iZ1BItHcr]:
              hasVariant($state, "signupNewUser", "newuserSubselected")
          })}
        >
          {(
            hasVariant(
              $state,
              "paymentManagement",
              "paymentmanagePaymententeredNosub"
            )
              ? true
              : hasVariant(globalVariants, "lightMode", "lightModeColors")
              ? true
              : true
          ) ? (
            <NormalDataField
              data-plasmic-name={"registerEmailInput"}
              data-plasmic-override={overrides.registerEmailInput}
              className={classNames("__wab_instance", sty.registerEmailInput, {
                [sty.registerEmailInputglobal_lightMode_lightModeColors]:
                  hasVariant(globalVariants, "lightMode", "lightModeColors"),
                [sty.registerEmailInputpaymentManagement_paymentmanagePaymententeredNosub]:
                  hasVariant(
                    $state,
                    "paymentManagement",
                    "paymentmanagePaymententeredNosub"
                  )
              })}
              color={"dark" as const}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  p.generateStateOnChangeProp($state, [
                    "registerEmailInput",
                    "value"
                  ])((e => e.target?.value).apply(null, eventArgs));
                }).apply(null, eventArgs);
                (async event => {
                  const $steps = {};
                  $steps["setNewUserSignup"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariant",
                              interactionUuid: "aC161bexy",
                              componentUuid: "Ku2Np8dqUu",
                              argName: "vgroup"
                            },
                            () => "signupNewUser"
                          ),
                          operation: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariant",
                              interactionUuid: "aC161bexy",
                              componentUuid: "Ku2Np8dqUu",
                              argName: "operation"
                            },
                            () => 0
                          ),
                          value: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariant",
                              interactionUuid: "aC161bexy",
                              componentUuid: "Ku2Np8dqUu",
                              argName: "value"
                            },
                            () => "newuserPwentered"
                          )
                        };
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariant",
                            interactionUuid: "aC161bexy",
                            componentUuid: "Ku2Np8dqUu"
                          },
                          () =>
                            (({ vgroup, value }) => {
                              p.set($state, vgroup, value);
                              return value;
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["setNewUserSignup"] === "object" &&
                    typeof $steps["setNewUserSignup"].then === "function"
                  ) {
                    $steps["setNewUserSignup"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariant",
                        interactionUuid: "aC161bexy",
                        componentUuid: "Ku2Np8dqUu"
                      },
                      $steps["setNewUserSignup"]
                    );
                  }
                })?.apply(null, eventArgs);
              }}
              placeholder={"Email" as const}
              showStartIcon={true}
              startIcon={
                <Icon2Icon
                  className={classNames(projectcss.all, sty.svg__eO0A)}
                  role={"img"}
                />
              }
              value={p.generateStateValueProp($state, [
                "registerEmailInput",
                "value"
              ])}
            />
          ) : null}
          {(
            hasVariant(
              $state,
              "signupReturningUser",
              "returninguserNopaymentinfo"
            )
              ? true
              : hasVariant(
                  $state,
                  "signupReturningUser",
                  "returninguserPwenteredSubalreadyselected"
                )
              ? true
              : hasVariant(
                  $state,
                  "signupReturningUser",
                  "returninguserPwenteredWrongpw"
                )
              ? true
              : hasVariant(
                  $state,
                  "signupReturningUser",
                  "returninguserEmailentered"
                )
              ? true
              : hasVariant($state, "signupNewUser", "newuserPaymententered")
              ? true
              : hasVariant($state, "signupNewUser", "newuserSubselected")
              ? true
              : hasVariant($state, "signupNewUser", "newuserPwentered")
              ? true
              : hasVariant($state, "signupNewUser", "newuserEmailentered")
              ? true
              : true
          ) ? (
            <NormalDataField
              data-plasmic-name={"registerPwInput"}
              data-plasmic-override={overrides.registerPwInput}
              className={classNames("__wab_instance", sty.registerPwInput, {
                [sty.registerPwInputsignupNewUser_newuserEmailentered]:
                  hasVariant($state, "signupNewUser", "newuserEmailentered"),
                [sty.registerPwInputsignupNewUser_newuserPaymententered]:
                  hasVariant($state, "signupNewUser", "newuserPaymententered"),
                [sty.registerPwInputsignupNewUser_newuserPwentered]: hasVariant(
                  $state,
                  "signupNewUser",
                  "newuserPwentered"
                ),
                [sty.registerPwInputsignupNewUser_newuserSubselected]:
                  hasVariant($state, "signupNewUser", "newuserSubselected"),
                [sty.registerPwInputsignupReturningUser_returninguserEmailentered]:
                  hasVariant(
                    $state,
                    "signupReturningUser",
                    "returninguserEmailentered"
                  ),
                [sty.registerPwInputsignupReturningUser_returninguserNopaymentinfo]:
                  hasVariant(
                    $state,
                    "signupReturningUser",
                    "returninguserNopaymentinfo"
                  ),
                [sty.registerPwInputsignupReturningUser_returninguserPwenteredSubalreadyselected]:
                  hasVariant(
                    $state,
                    "signupReturningUser",
                    "returninguserPwenteredSubalreadyselected"
                  ),
                [sty.registerPwInputsignupReturningUser_returninguserPwenteredWrongpw]:
                  hasVariant(
                    $state,
                    "signupReturningUser",
                    "returninguserPwenteredWrongpw"
                  )
              })}
              color={"dark" as const}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  p.generateStateOnChangeProp($state, [
                    "registerPwInput",
                    "value"
                  ])((e => e.target?.value).apply(null, eventArgs));
                }).apply(null, eventArgs);
                (async event => {
                  const $steps = {};
                  $steps["setNewUserSignup"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariant",
                              interactionUuid: "RpVWXKcJC",
                              componentUuid: "Ku2Np8dqUu",
                              argName: "vgroup"
                            },
                            () => "signupNewUser"
                          ),
                          operation: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariant",
                              interactionUuid: "RpVWXKcJC",
                              componentUuid: "Ku2Np8dqUu",
                              argName: "operation"
                            },
                            () => 0
                          ),
                          value: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariant",
                              interactionUuid: "RpVWXKcJC",
                              componentUuid: "Ku2Np8dqUu",
                              argName: "value"
                            },
                            () => "newuserPwentered"
                          )
                        };
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariant",
                            interactionUuid: "RpVWXKcJC",
                            componentUuid: "Ku2Np8dqUu"
                          },
                          () =>
                            (({ vgroup, value }) => {
                              p.set($state, vgroup, value);
                              return value;
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["setNewUserSignup"] === "object" &&
                    typeof $steps["setNewUserSignup"].then === "function"
                  ) {
                    $steps["setNewUserSignup"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariant",
                        interactionUuid: "RpVWXKcJC",
                        componentUuid: "Ku2Np8dqUu"
                      },
                      $steps["setNewUserSignup"]
                    );
                  }
                })?.apply(null, eventArgs);
              }}
              placeholder={"Password" as const}
              showStartIcon={true}
              startIcon={
                <Icon4Icon
                  className={classNames(projectcss.all, sty.svg___9T9SF)}
                  role={"img"}
                />
              }
              value={p.generateStateValueProp($state, [
                "registerPwInput",
                "value"
              ])}
            />
          ) : null}
          {(
            hasVariant(
              $state,
              "signupReturningUser",
              "returninguserNopaymentinfo"
            )
              ? true
              : hasVariant(
                  $state,
                  "signupReturningUser",
                  "returninguserPwenteredSubalreadyselected"
                )
              ? true
              : hasVariant(
                  $state,
                  "signupReturningUser",
                  "returninguserPwenteredWrongpw"
                )
              ? true
              : hasVariant(
                  $state,
                  "signupReturningUser",
                  "returninguserEmailentered"
                )
              ? true
              : hasVariant($state, "signupNewUser", "newuserPaymententered")
              ? true
              : hasVariant($state, "signupNewUser", "newuserSubselected")
              ? true
              : hasVariant($state, "signupNewUser", "newuserPwentered")
              ? true
              : hasVariant($state, "signupNewUser", "newuserEmailentered")
              ? true
              : true
          ) ? (
            <NormalDataField
              data-plasmic-name={"registerPwInputUserRecognized"}
              data-plasmic-override={overrides.registerPwInputUserRecognized}
              className={classNames(
                "__wab_instance",
                sty.registerPwInputUserRecognized,
                {
                  [sty.registerPwInputUserRecognizedsignupNewUser_newuserEmailentered]:
                    hasVariant($state, "signupNewUser", "newuserEmailentered"),
                  [sty.registerPwInputUserRecognizedsignupNewUser_newuserPaymententered]:
                    hasVariant(
                      $state,
                      "signupNewUser",
                      "newuserPaymententered"
                    ),
                  [sty.registerPwInputUserRecognizedsignupNewUser_newuserPwentered]:
                    hasVariant($state, "signupNewUser", "newuserPwentered"),
                  [sty.registerPwInputUserRecognizedsignupNewUser_newuserSubselected]:
                    hasVariant($state, "signupNewUser", "newuserSubselected"),
                  [sty.registerPwInputUserRecognizedsignupReturningUser_returninguserEmailentered]:
                    hasVariant(
                      $state,
                      "signupReturningUser",
                      "returninguserEmailentered"
                    ),
                  [sty.registerPwInputUserRecognizedsignupReturningUser_returninguserNopaymentinfo]:
                    hasVariant(
                      $state,
                      "signupReturningUser",
                      "returninguserNopaymentinfo"
                    ),
                  [sty.registerPwInputUserRecognizedsignupReturningUser_returninguserPwenteredSubalreadyselected]:
                    hasVariant(
                      $state,
                      "signupReturningUser",
                      "returninguserPwenteredSubalreadyselected"
                    ),
                  [sty.registerPwInputUserRecognizedsignupReturningUser_returninguserPwenteredWrongpw]:
                    hasVariant(
                      $state,
                      "signupReturningUser",
                      "returninguserPwenteredWrongpw"
                    )
                }
              )}
              color={"dark" as const}
              onChange={async (...eventArgs) => {
                ((...eventArgs) => {
                  p.generateStateOnChangeProp($state, [
                    "registerPwInputUserRecognized",
                    "value"
                  ])((e => e.target?.value).apply(null, eventArgs));
                }).apply(null, eventArgs);
                (async event => {
                  const $steps = {};
                  $steps["setSignupReturningUser"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariant",
                              interactionUuid: "6PuSEi7NJ",
                              componentUuid: "Ku2Np8dqUu",
                              argName: "vgroup"
                            },
                            () => "signupReturningUser"
                          ),
                          operation: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariant",
                              interactionUuid: "6PuSEi7NJ",
                              componentUuid: "Ku2Np8dqUu",
                              argName: "operation"
                            },
                            () => 0
                          ),
                          value: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariant",
                              interactionUuid: "6PuSEi7NJ",
                              componentUuid: "Ku2Np8dqUu",
                              argName: "value"
                            },
                            () => "returninguserPwenteredSubalreadyselected"
                          )
                        };
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariant",
                            interactionUuid: "6PuSEi7NJ",
                            componentUuid: "Ku2Np8dqUu"
                          },
                          () =>
                            (({ vgroup, value }) => {
                              p.set($state, vgroup, value);
                              return value;
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["setSignupReturningUser"] === "object" &&
                    typeof $steps["setSignupReturningUser"].then === "function"
                  ) {
                    $steps["setSignupReturningUser"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariant",
                        interactionUuid: "6PuSEi7NJ",
                        componentUuid: "Ku2Np8dqUu"
                      },
                      $steps["setSignupReturningUser"]
                    );
                  }
                })?.apply(null, eventArgs);
              }}
              placeholder={"Password" as const}
              showStartIcon={true}
              startIcon={
                <Icon4Icon
                  className={classNames(projectcss.all, sty.svg__x34CN)}
                  role={"img"}
                />
              }
              value={p.generateStateValueProp($state, [
                "registerPwInputUserRecognized",
                "value"
              ])}
            />
          ) : null}
          {(
            hasVariant(
              $state,
              "paymentManagement",
              "paymentmanagePaymententeredNosub"
            )
              ? true
              : hasVariant(
                  $state,
                  "signupReturningUser",
                  "returninguserNopaymentinfo"
                )
              ? true
              : hasVariant($state, "signupNewUser", "newuserPaymententered")
              ? true
              : hasVariant($state, "signupNewUser", "newuserSubselected")
              ? true
              : hasVariant($state, "signupNewUser", "newuserPwentered")
              ? true
              : hasVariant($state, "signupNewUser", "newuserEmailentered")
              ? true
              : hasVariant(globalVariants, "lightMode", "lightModeColors")
              ? true
              : true
          ) ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__mXwvu, {
                [sty.freeBoxglobal_lightMode_lightModeColors__mXwvufsG7C]:
                  hasVariant(globalVariants, "lightMode", "lightModeColors"),
                [sty.freeBoxpaymentManagement_paymentmanagePaymententeredNosub__mXwvuZGdYa]:
                  hasVariant(
                    $state,
                    "paymentManagement",
                    "paymentmanagePaymententeredNosub"
                  ),
                [sty.freeBoxsignupNewUser_newuserEmailentered__mXwvuSt0Jw]:
                  hasVariant($state, "signupNewUser", "newuserEmailentered"),
                [sty.freeBoxsignupNewUser_newuserPaymententered__mXwvuMrtW]:
                  hasVariant($state, "signupNewUser", "newuserPaymententered"),
                [sty.freeBoxsignupNewUser_newuserPwentered__mXwvuHl0Yh]:
                  hasVariant($state, "signupNewUser", "newuserPwentered"),
                [sty.freeBoxsignupNewUser_newuserSubselected__mXwvutHcr]:
                  hasVariant($state, "signupNewUser", "newuserSubselected"),
                [sty.freeBoxsignupReturningUser_returninguserNopaymentinfo__mXwvuqnAvP]:
                  hasVariant(
                    $state,
                    "signupReturningUser",
                    "returninguserNopaymentinfo"
                  )
              })}
            >
              <p.PlasmicLink
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(projectcss.all, projectcss.a, sty.link)}
                component={Link}
                onClick={async event => {
                  const $steps = {};
                  $steps["setSignup"] = true
                    ? (() => {
                        const actionArgs = {
                          vgroup: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariant",
                              interactionUuid: "tTiLRtORo",
                              componentUuid: "Ku2Np8dqUu",
                              argName: "vgroup"
                            },
                            () => "signupNewUser"
                          ),
                          operation: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariant",
                              interactionUuid: "tTiLRtORo",
                              componentUuid: "Ku2Np8dqUu",
                              argName: "operation"
                            },
                            () => 0
                          ),
                          value: __wrapUserFunction(
                            {
                              type: "InteractionArgLoc",
                              actionName: "updateVariant",
                              interactionUuid: "tTiLRtORo",
                              componentUuid: "Ku2Np8dqUu",
                              argName: "value"
                            },
                            () => "newuserSubselected"
                          )
                        };
                        return __wrapUserFunction(
                          {
                            type: "InteractionLoc",
                            actionName: "updateVariant",
                            interactionUuid: "tTiLRtORo",
                            componentUuid: "Ku2Np8dqUu"
                          },
                          () =>
                            (({ vgroup, value }) => {
                              p.set($state, vgroup, value);
                              return value;
                            })?.apply(null, [actionArgs]),
                          actionArgs
                        );
                      })()
                    : undefined;
                  if (
                    typeof $steps["setSignup"] === "object" &&
                    typeof $steps["setSignup"].then === "function"
                  ) {
                    $steps["setSignup"] = await __wrapUserPromise(
                      {
                        type: "InteractionLoc",
                        actionName: "updateVariant",
                        interactionUuid: "tTiLRtORo",
                        componentUuid: "Ku2Np8dqUu"
                      },
                      $steps["setSignup"]
                    );
                  }
                }}
                platform={"nextjs"}
              >
                <SubscriptionSelectBox
                  className={classNames(
                    "__wab_instance",
                    sty.subscriptionSelectBox__jxG0,
                    {
                      [sty.subscriptionSelectBoxsignupNewUser_newuserPaymententered__jxG0MrtW]:
                        hasVariant(
                          $state,
                          "signupNewUser",
                          "newuserPaymententered"
                        ),
                      [sty.subscriptionSelectBoxsignupNewUser_newuserPwentered__jxG0Hl0Yh]:
                        hasVariant($state, "signupNewUser", "newuserPwentered"),
                      [sty.subscriptionSelectBoxsignupNewUser_newuserSubselected__jxG0THcr]:
                        hasVariant(
                          $state,
                          "signupNewUser",
                          "newuserSubselected"
                        ),
                      [sty.subscriptionSelectBoxsignupReturningUser_returninguserNopaymentinfo__jxG0QnAvP]:
                        hasVariant(
                          $state,
                          "signupReturningUser",
                          "returninguserNopaymentinfo"
                        )
                    }
                  )}
                  selected={
                    hasVariant(
                      $state,
                      "signupReturningUser",
                      "returninguserNopaymentinfo"
                    )
                      ? ("selected" as const)
                      : hasVariant(
                          $state,
                          "signupNewUser",
                          "newuserPaymententered"
                        )
                      ? ("selected" as const)
                      : hasVariant(
                          $state,
                          "signupNewUser",
                          "newuserSubselected"
                        )
                      ? ("selected" as const)
                      : undefined
                  }
                  slot={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oTZq
                      )}
                    >
                      {"Access the entire site"}
                    </div>
                  }
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__jRuBe
                    )}
                  >
                    {"$29.99 | Monthly"}
                  </div>
                </SubscriptionSelectBox>
              </p.PlasmicLink>
              <SubscriptionSelectBox
                className={classNames(
                  "__wab_instance",
                  sty.subscriptionSelectBox__vZe8N
                )}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__q4Ja3
                    )}
                  >
                    {"Access the entire site for 30 days."}
                  </div>
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__f1ZSf
                  )}
                >
                  {"$39.99  |  Single month"}
                </div>
              </SubscriptionSelectBox>
              <SubscriptionSelectBox
                className={classNames(
                  "__wab_instance",
                  sty.subscriptionSelectBox___7SHgR
                )}
                slot={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___5Ust
                    )}
                  >
                    {"Access the entire site for 6 months."}
                  </div>
                }
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tIsXf
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>{"$99.99  |  "}</React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ color: "#F2A057" }}
                    >
                      {"Special package"}
                    </span>
                  </React.Fragment>
                </div>
              </SubscriptionSelectBox>
            </p.Stack>
          ) : null}
          {(
            hasVariant($state, "signupNewUser", "newuserPaymententered")
              ? true
              : hasVariant($state, "signupNewUser", "newuserSubselected")
              ? true
              : hasVariant($state, "signupNewUser", "newuserPwentered")
              ? true
              : hasVariant($state, "signupNewUser", "newuserEmailentered")
              ? true
              : true
          ) ? (
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__vaYOe,
                {
                  [sty.textsignupNewUser_newuserEmailentered__vaYOeSt0Jw]:
                    hasVariant($state, "signupNewUser", "newuserEmailentered"),
                  [sty.textsignupNewUser_newuserPaymententered__vaYOeMrtW]:
                    hasVariant(
                      $state,
                      "signupNewUser",
                      "newuserPaymententered"
                    ),
                  [sty.textsignupNewUser_newuserPwentered__vaYOeHl0Yh]:
                    hasVariant($state, "signupNewUser", "newuserPwentered"),
                  [sty.textsignupNewUser_newuserSubselected__vaYOetHcr]:
                    hasVariant($state, "signupNewUser", "newuserSubselected")
                }
              )}
            >
              {
                "Or click “Sign Up” without selecting a plan to start with a free account."
              }
            </div>
          ) : null}
          {(
            hasVariant(
              $state,
              "signupReturningUser",
              "returninguserNopaymentinfo"
            )
              ? true
              : hasVariant($state, "signupNewUser", "newuserPaymententered")
              ? true
              : hasVariant($state, "signupNewUser", "newuserSubselected")
              ? true
              : hasVariant($state, "signupNewUser", "newuserPwentered")
              ? true
              : hasVariant(globalVariants, "lightMode", "lightModeColors")
              ? true
              : true
          ) ? (
            <div
              className={classNames(projectcss.all, sty.freeBox___2BNDx, {
                [sty.freeBoxglobal_lightMode_lightModeColors___2BNDxfsG7C]:
                  hasVariant(globalVariants, "lightMode", "lightModeColors"),
                [sty.freeBoxsignupNewUser_newuserPaymententered___2BNDxMrtW]:
                  hasVariant($state, "signupNewUser", "newuserPaymententered"),
                [sty.freeBoxsignupNewUser_newuserPwentered___2BNDxHl0Yh]:
                  hasVariant($state, "signupNewUser", "newuserPwentered"),
                [sty.freeBoxsignupNewUser_newuserSubselected___2BNDxtHcr]:
                  hasVariant($state, "signupNewUser", "newuserSubselected"),
                [sty.freeBoxsignupReturningUser_returninguserNopaymentinfo___2BNDxqnAvP]:
                  hasVariant(
                    $state,
                    "signupReturningUser",
                    "returninguserNopaymentinfo"
                  )
              })}
            >
              {true ? (
                <TabsContainer
                  data-plasmic-name={"tabsContainer"}
                  data-plasmic-override={overrides.tabsContainer}
                  className={classNames("__wab_instance", sty.tabsContainer)}
                  initialKey={"tab1" as const}
                  previewAll={false}
                >
                  <ph.DataCtxReader>
                    {$ctx => (
                      <React.Fragment>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__lfVaM,
                            {
                              [sty.freeBoxsignupNewUser_newuserPaymententered__lfVaMMrtW]:
                                hasVariant(
                                  $state,
                                  "signupNewUser",
                                  "newuserPaymententered"
                                ),
                              [sty.freeBoxsignupNewUser_newuserPwentered__lfVaMhl0Yh]:
                                hasVariant(
                                  $state,
                                  "signupNewUser",
                                  "newuserPwentered"
                                ),
                              [sty.freeBoxsignupNewUser_newuserSubselected__lfVaMtHcr]:
                                hasVariant(
                                  $state,
                                  "signupNewUser",
                                  "newuserSubselected"
                                )
                            }
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__ix5R2
                            )}
                          >
                            <TabButton
                              className={classNames(
                                "__wab_instance",
                                sty.tabButton__hiFtv
                              )}
                              tabKey={"tab1" as const}
                            >
                              <Button
                                color={"clear" as const}
                                shape={"sharp" as const}
                                size={"minimal" as const}
                                startIcon={null}
                              >
                                <Icon9Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__pb2Ku
                                  )}
                                  role={"img"}
                                />
                              </Button>
                            </TabButton>
                            <TabButton
                              className={classNames(
                                "__wab_instance",
                                sty.tabButton__cWTm
                              )}
                              tabKey={"tab2" as const}
                            >
                              <Button
                                color={"clear" as const}
                                shape={"sharp" as const}
                                size={"minimal" as const}
                                startIcon={null}
                              >
                                <Icon6Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__jiSve
                                  )}
                                  role={"img"}
                                />
                              </Button>
                            </TabButton>
                            <TabButton
                              className={classNames(
                                "__wab_instance",
                                sty.tabButton___8Rw9
                              )}
                              tabKey={"tab3" as const}
                            >
                              <Button
                                color={"clear" as const}
                                shape={"sharp" as const}
                                size={"minimal" as const}
                                startIcon={null}
                              >
                                <Icon7Icon
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__tXe5D
                                  )}
                                  role={"img"}
                                />
                              </Button>
                            </TabButton>
                            <TabUnderline
                              data-plasmic-name={"tabUnderline"}
                              data-plasmic-override={overrides.tabUnderline}
                              className={classNames(
                                "__wab_instance",
                                sty.tabUnderline
                              )}
                            />

                            <Icon8Icon
                              className={classNames(
                                projectcss.all,
                                sty.svg__slF6W
                              )}
                              role={"img"}
                            />
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__mcfEx
                            )}
                          >
                            <TabContent
                              className={classNames(
                                "__wab_instance",
                                sty.tabContent__peGs
                              )}
                              tabKey={"tab1" as const}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__gdiVu
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lKe4H,
                                    {
                                      [sty.textglobal_lightMode_lightModeColors__lKe4HfsG7C]:
                                        hasVariant(
                                          globalVariants,
                                          "lightMode",
                                          "lightModeColors"
                                        )
                                    }
                                  )}
                                >
                                  {"Pay with credit card:"}
                                </div>
                                <NormalDataField
                                  data-plasmic-name={"paymentCcEntry"}
                                  data-plasmic-override={
                                    overrides.paymentCcEntry
                                  }
                                  className={classNames(
                                    "__wab_instance",
                                    sty.paymentCcEntry,
                                    {
                                      [sty.paymentCcEntryglobal_lightMode_lightModeColors]:
                                        hasVariant(
                                          globalVariants,
                                          "lightMode",
                                          "lightModeColors"
                                        ),
                                      [sty.paymentCcEntrysignupNewUser_newuserPaymententered]:
                                        hasVariant(
                                          $state,
                                          "signupNewUser",
                                          "newuserPaymententered"
                                        ),
                                      [sty.paymentCcEntrysignupNewUser_newuserPwentered]:
                                        hasVariant(
                                          $state,
                                          "signupNewUser",
                                          "newuserPwentered"
                                        ),
                                      [sty.paymentCcEntrysignupNewUser_newuserSubselected]:
                                        hasVariant(
                                          $state,
                                          "signupNewUser",
                                          "newuserSubselected"
                                        )
                                    }
                                  )}
                                  color={"dark" as const}
                                  onChange={async (...eventArgs) => {
                                    ((...eventArgs) => {
                                      p.generateStateOnChangeProp($state, [
                                        "paymentCcEntry",
                                        "value"
                                      ])(
                                        (e => e.target?.value).apply(
                                          null,
                                          eventArgs
                                        )
                                      );
                                    }).apply(null, eventArgs);
                                    (async event => {
                                      const $steps = {};
                                      $steps["setNewUserSignup"] = true
                                        ? (() => {
                                            const actionArgs = {
                                              vgroup: __wrapUserFunction(
                                                {
                                                  type: "InteractionArgLoc",
                                                  actionName: "updateVariant",
                                                  interactionUuid: "nsEXQBxTE",
                                                  componentUuid: "Ku2Np8dqUu",
                                                  argName: "vgroup"
                                                },
                                                () => "signupNewUser"
                                              ),
                                              operation: __wrapUserFunction(
                                                {
                                                  type: "InteractionArgLoc",
                                                  actionName: "updateVariant",
                                                  interactionUuid: "nsEXQBxTE",
                                                  componentUuid: "Ku2Np8dqUu",
                                                  argName: "operation"
                                                },
                                                () => 0
                                              ),
                                              value: __wrapUserFunction(
                                                {
                                                  type: "InteractionArgLoc",
                                                  actionName: "updateVariant",
                                                  interactionUuid: "nsEXQBxTE",
                                                  componentUuid: "Ku2Np8dqUu",
                                                  argName: "value"
                                                },
                                                () => "newuserPaymententered"
                                              )
                                            };
                                            return __wrapUserFunction(
                                              {
                                                type: "InteractionLoc",
                                                actionName: "updateVariant",
                                                interactionUuid: "nsEXQBxTE",
                                                componentUuid: "Ku2Np8dqUu"
                                              },
                                              () =>
                                                (({ vgroup, value }) => {
                                                  p.set($state, vgroup, value);
                                                  return value;
                                                })?.apply(null, [actionArgs]),
                                              actionArgs
                                            );
                                          })()
                                        : undefined;
                                      if (
                                        typeof $steps["setNewUserSignup"] ===
                                          "object" &&
                                        typeof $steps["setNewUserSignup"]
                                          .then === "function"
                                      ) {
                                        $steps["setNewUserSignup"] =
                                          await __wrapUserPromise(
                                            {
                                              type: "InteractionLoc",
                                              actionName: "updateVariant",
                                              interactionUuid: "nsEXQBxTE",
                                              componentUuid: "Ku2Np8dqUu"
                                            },
                                            $steps["setNewUserSignup"]
                                          );
                                      }
                                    })?.apply(null, eventArgs);
                                  }}
                                  placeholder={"Credit Card #" as const}
                                  showStartIcon={true}
                                  startIcon={
                                    <Icon9Icon
                                      className={classNames(
                                        projectcss.all,
                                        sty.svg__ti2Ir
                                      )}
                                      role={"img"}
                                    />
                                  }
                                  value={p.generateStateValueProp($state, [
                                    "paymentCcEntry",
                                    "value"
                                  ])}
                                />

                                {true ? (
                                  <div
                                    className={classNames(
                                      projectcss.all,
                                      sty.freeBox__j1Cq6
                                    )}
                                  >
                                    <NormalDataField
                                      data-plasmic-name={"paymentCcDate"}
                                      data-plasmic-override={
                                        overrides.paymentCcDate
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.paymentCcDate
                                      )}
                                      color={"dark" as const}
                                      doubleFieldLeft={
                                        "doubleFieldLeft" as const
                                      }
                                      onChange={(...eventArgs) => {
                                        p.generateStateOnChangeProp($state, [
                                          "paymentCcDate",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }}
                                      placeholder={"MM  /  YY" as const}
                                      showStartIcon={true}
                                      startIcon={
                                        <Icon10Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__cXctn
                                          )}
                                          role={"img"}
                                        />
                                      }
                                      value={p.generateStateValueProp($state, [
                                        "paymentCcDate",
                                        "value"
                                      ])}
                                    />

                                    <NormalDataField
                                      data-plasmic-name={"paymentCcCvc"}
                                      data-plasmic-override={
                                        overrides.paymentCcCvc
                                      }
                                      className={classNames(
                                        "__wab_instance",
                                        sty.paymentCcCvc
                                      )}
                                      color={"dark" as const}
                                      doubleFieldRight={
                                        "doubleFieldRight" as const
                                      }
                                      onChange={(...eventArgs) => {
                                        p.generateStateOnChangeProp($state, [
                                          "paymentCcCvc",
                                          "value"
                                        ])(
                                          (e => e.target?.value).apply(
                                            null,
                                            eventArgs
                                          )
                                        );
                                      }}
                                      placeholder={"CVC" as const}
                                      showStartIcon={true}
                                      startIcon={
                                        <Icon4Icon
                                          className={classNames(
                                            projectcss.all,
                                            sty.svg__z4Al0
                                          )}
                                          role={"img"}
                                        />
                                      }
                                      value={p.generateStateValueProp($state, [
                                        "paymentCcCvc",
                                        "value"
                                      ])}
                                    />
                                  </div>
                                ) : null}
                              </div>
                            </TabContent>
                            <TabContent
                              className={classNames(
                                "__wab_instance",
                                sty.tabContent__dZvlb
                              )}
                              tabKey={"tab2" as const}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ilyS0
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__fWmIw
                                  )}
                                >
                                  {"Pay with PayPal:"}
                                </div>
                              </div>
                            </TabContent>
                            <TabContent
                              className={classNames(
                                "__wab_instance",
                                sty.tabContent__ehMum
                              )}
                              tabKey={"tab3" as const}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__ydwd5
                                )}
                              >
                                <div
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.text__lkkeo
                                  )}
                                >
                                  {"Pay with BTC:"}
                                </div>
                              </div>
                            </TabContent>
                          </div>
                        </div>
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___8Eq0Y
                          )}
                          id={"paymentFormBottom" as const}
                        />
                      </React.Fragment>
                    )}
                  </ph.DataCtxReader>
                </TabsContainer>
              ) : null}
            </div>
          ) : null}
        </div>
      ) : null}
      {(
        hasVariant(globalVariants, "lightMode", "lightModeColors") ? true : true
      ) ? (
        <NormalButton
          data-plasmic-name={"normalButton"}
          data-plasmic-override={overrides.normalButton}
          className={classNames("__wab_instance", sty.normalButton, {
            [sty.normalButtonglobal_lightMode_lightModeColors]: hasVariant(
              globalVariants,
              "lightMode",
              "lightModeColors"
            ),
            [sty.normalButtonpaymentManagement_paymentmanagePaymententeredNosub]:
              hasVariant(
                $state,
                "paymentManagement",
                "paymentmanagePaymententeredNosub"
              ),
            [sty.normalButtonsignupNewUser_newuserEmailentered]: hasVariant(
              $state,
              "signupNewUser",
              "newuserEmailentered"
            ),
            [sty.normalButtonsignupNewUser_newuserPaymententered]: hasVariant(
              $state,
              "signupNewUser",
              "newuserPaymententered"
            ),
            [sty.normalButtonsignupNewUser_newuserPwentered]: hasVariant(
              $state,
              "signupNewUser",
              "newuserPwentered"
            ),
            [sty.normalButtonsignupNewUser_newuserSubselected]: hasVariant(
              $state,
              "signupNewUser",
              "newuserSubselected"
            ),
            [sty.normalButtonsignupReturningUser_returninguserNopaymentinfo]:
              hasVariant(
                $state,
                "signupReturningUser",
                "returninguserNopaymentinfo"
              )
          })}
          color={
            hasVariant($state, "signupNewUser", "newuserPaymententered")
              ? ("hgfOrange" as const)
              : undefined
          }
          shape={"rounded" as const}
          state={
            hasVariant($state, "signupNewUser", "newuserPaymententered")
              ? []
              : hasVariant($state, "signupNewUser", "newuserSubselected")
              ? ["formIncomplete"]
              : hasVariant($state, "signupNewUser", "newuserPwentered")
              ? ["formIncomplete"]
              : hasVariant($state, "signupNewUser", "newuserEmailentered")
              ? ["formIncomplete", "isDisabled"]
              : ["formIncomplete", "isDisabled"]
          }
        >
          {hasVariant(
            $state,
            "paymentManagement",
            "paymentmanagePaymententeredNosub"
          )
            ? "Add Payment Info"
            : hasVariant(
                $state,
                "signupReturningUser",
                "returninguserNopaymentinfo"
              )
            ? "Update Payment Info"
            : "Sign Up"}
        </NormalButton>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "loginModalBannercontainer",
    "img",
    "divider",
    "registerEmailInput",
    "registerPwInput",
    "registerPwInputUserRecognized",
    "link",
    "tabsContainer",
    "tabUnderline",
    "paymentCcEntry",
    "paymentCcDate",
    "paymentCcCvc",
    "normalButton"
  ],
  loginModalBannercontainer: ["loginModalBannercontainer", "img"],
  img: ["img"],
  divider: ["divider"],
  registerEmailInput: ["registerEmailInput"],
  registerPwInput: ["registerPwInput"],
  registerPwInputUserRecognized: ["registerPwInputUserRecognized"],
  link: ["link"],
  tabsContainer: [
    "tabsContainer",
    "tabUnderline",
    "paymentCcEntry",
    "paymentCcDate",
    "paymentCcCvc"
  ],
  tabUnderline: ["tabUnderline"],
  paymentCcEntry: ["paymentCcEntry"],
  paymentCcDate: ["paymentCcDate"],
  paymentCcCvc: ["paymentCcCvc"],
  normalButton: ["normalButton"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  loginModalBannercontainer: "div";
  img: typeof p.PlasmicImg;
  divider: typeof Divider;
  registerEmailInput: typeof NormalDataField;
  registerPwInput: typeof NormalDataField;
  registerPwInputUserRecognized: typeof NormalDataField;
  link: "a";
  tabsContainer: typeof TabsContainer;
  tabUnderline: typeof TabUnderline;
  paymentCcEntry: typeof NormalDataField;
  paymentCcDate: typeof NormalDataField;
  paymentCcCvc: typeof NormalDataField;
  normalButton: typeof NormalButton;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRegistrationAndPaymentForm__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRegistrationAndPaymentForm__VariantsArgs;
    args?: PlasmicRegistrationAndPaymentForm__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRegistrationAndPaymentForm__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicRegistrationAndPaymentForm__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicRegistrationAndPaymentForm__ArgProps,
          internalVariantPropNames:
            PlasmicRegistrationAndPaymentForm__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicRegistrationAndPaymentForm__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRegistrationAndPaymentForm";
  } else {
    func.displayName = `PlasmicRegistrationAndPaymentForm.${nodeName}`;
  }
  return func;
}

export const PlasmicRegistrationAndPaymentForm = Object.assign(
  // Top-level PlasmicRegistrationAndPaymentForm renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    loginModalBannercontainer: makeNodeComponent("loginModalBannercontainer"),
    img: makeNodeComponent("img"),
    divider: makeNodeComponent("divider"),
    registerEmailInput: makeNodeComponent("registerEmailInput"),
    registerPwInput: makeNodeComponent("registerPwInput"),
    registerPwInputUserRecognized: makeNodeComponent(
      "registerPwInputUserRecognized"
    ),
    link: makeNodeComponent("link"),
    tabsContainer: makeNodeComponent("tabsContainer"),
    tabUnderline: makeNodeComponent("tabUnderline"),
    paymentCcEntry: makeNodeComponent("paymentCcEntry"),
    paymentCcDate: makeNodeComponent("paymentCcDate"),
    paymentCcCvc: makeNodeComponent("paymentCcCvc"),
    normalButton: makeNodeComponent("normalButton"),

    // Metadata about props expected for PlasmicRegistrationAndPaymentForm
    internalVariantProps: PlasmicRegistrationAndPaymentForm__VariantProps,
    internalArgProps: PlasmicRegistrationAndPaymentForm__ArgProps
  }
);

export default PlasmicRegistrationAndPaymentForm;
/* prettier-ignore-end */
